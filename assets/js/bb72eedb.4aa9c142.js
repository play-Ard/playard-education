"use strict";(self.webpackChunkplayard_education=self.webpackChunkplayard_education||[]).push([[147],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),f=a,y=d["".concat(u,".").concat(f)]||d[f]||s[f]||o;return n?r.createElement(y,i(i({ref:t},p),{},{components:n})):r.createElement(y,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6027:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return s}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={sidebar_label:"How to Interact with Player ?",sidebar_position:6,id:"pgeblog6",title:"How to Interact with Player",slug:"/howtointeractwithplayer"},u=void 0,c={unversionedId:"playardGameEngine/pgeblog6",id:"playardGameEngine/pgeblog6",title:"How to Interact with Player",description:"After all boring animations now we can get input from player. PGE has built-in input module. We must get instance from Input class and call its begin functions to apply configurations.",source:"@site/docs/playardGameEngine/howtointeractwithplayer.md",sourceDirName:"playardGameEngine",slug:"/howtointeractwithplayer",permalink:"/playard-education/docs/howtointeractwithplayer",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/playardGameEngine/howtointeractwithplayer.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_label:"How to Interact with Player ?",sidebar_position:6,id:"pgeblog6",title:"How to Interact with Player",slug:"/howtointeractwithplayer"},sidebar:"tutorialSidebar",previous:{title:"How Alignment Works In PGE ?",permalink:"/playard-education/docs/howalignmentworks"},next:{title:"Adafruit GFX",permalink:"/playard-education/docs/playardGameEngine/software-utilities/Adafruit GFX"}},p={},s=[{value:"Buttons",id:"buttons",level:3},{value:"Built-in Keyboard Module",id:"built-in-keyboard-module",level:3}],d={toc:s};function f(e){var t=e.components,l=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"After all boring animations now we can get input from player. PGE has built-in input module. We must get instance from Input class and call its begin functions to apply configurations."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Input input;\n\nvoid setup () {\n  input.begin();\n}\n")),(0,o.kt)("h3",{id:"buttons"},"Buttons"),(0,o.kt)("p",null,"An input object have many functions for each button that returns 1 when pressed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"input.BUTTON_1();\ninput.BUTTON_2();\ninput.BUTTON_3();\ninput.BUTTON_U();\ninput.BUTTON_R();\ninput.BUTTON_D();\ninput.BUTTON_L();\n")),(0,o.kt)("h3",{id:"built-in-keyboard-module"},"Built-in Keyboard Module"),(0,o.kt)("p",null,(0,o.kt)("img",{loading:"lazy",src:n(6e3).Z,width:"936",height:"816"})))}f.isMDXComponent=!0},6e3:function(e,t,n){t.Z=n.p+"assets/images/keyboard-9a7a4c1fb697866c142a9c25dbb8281f.jpg"}}]);