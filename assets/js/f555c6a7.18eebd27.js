"use strict";(self.webpackChunkplayard_education=self.webpackChunkplayard_education||[]).push([[570],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return t?a.createElement(g,r(r({ref:n},p),{},{components:t})):a.createElement(g,r({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3644:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var a=t(7462),o=t(3366),i=(t(7294),t(3905)),r=["components"],l={sidebar_label:"How to Create Your Own Game",sidebar_position:3,id:"pgeblog3",title:"How to Create Your Own Game",slug:"/howtocreateyourowngame"},s="How to Create Your Own Game",c={unversionedId:"playardGameEngine/pgeblog3",id:"playardGameEngine/pgeblog3",title:"How to Create Your Own Game",description:"The Playard Game Engine is a game engine based on the speed of the C++ language and the flexibility of the XML language. It allows you to make impressive games by shortening the development process. To make great games with the Playard Game Engine, you just need to download the source codes and include them in your program.",source:"@site/docs/playardGameEngine/howtocreateyourowngame.md",sourceDirName:"playardGameEngine",slug:"/howtocreateyourowngame",permalink:"/playard-education/docs/howtocreateyourowngame",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/playardGameEngine/howtocreateyourowngame.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"How to Create Your Own Game",sidebar_position:3,id:"pgeblog3",title:"How to Create Your Own Game",slug:"/howtocreateyourowngame"},sidebar:"tutorialSidebar",previous:{title:"Why use Playard Game Engine ?",permalink:"/playard-education/docs/why-pge"},next:{title:"How Alignment Works In PGE ?",permalink:"/playard-education/docs/howalignmentworks"}},p={},u=[{value:"What Are Components and How to Use Them",id:"what-are-components-and-how-to-use-them",level:2},{value:"Layouts",id:"layouts",level:3},{value:"Points",id:"points",level:3},{value:"Rectangles",id:"rectangles",level:3},{value:"Circles",id:"circles",level:3},{value:"Triangles",id:"triangles",level:3},{value:"Texts",id:"texts",level:3}],d={toc:u};function m(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"how-to-create-your-own-game"},"How to Create Your Own Game"),(0,i.kt)("p",null,"The Playard Game Engine is a game engine based on the speed of the C++ language and the flexibility of the XML language. It allows you to make impressive games by shortening the development process. To make great games with the Playard Game Engine, you just need to download the source codes and include them in your program."),(0,i.kt)("h2",{id:"what-are-components-and-how-to-use-them"},"What Are Components and How to Use Them"),(0,i.kt)("p",null,"Components is one of the innovative solutions of the Playard Game Engine. On PGE, everything is produced and arranged in the form of components.Different components created for figures, texts and images are arranged in the background and displayed on the screen. Components thus provide a cleaner working environment for the programmer."),(0,i.kt)("p",null,"To access the components in our program we must load related XML string with function loadXML.  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"")),(0,i.kt)("h3",{id:"layouts"},"Layouts"),(0,i.kt)("p",null,'Layouts are components that can contain component types, including layouts. Components can be grouped with layouts so that items on the screen can be aligned relative to each other or moved together. Each component has a parent layout, and the position of each component must be specified relative to the position of its parent. A layout has some attributes like "x-position", "y-position", "visibility" etc.'),(0,i.kt)("p",null,"We can create a layout component in XML. It must has an ID."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<Main>\n  <Layout\n  id = 'mainLayout'\n  x-position = '128'\n  y-position = '64'>\n\n  </Layout>\n</Main>\n")),(0,i.kt)("p",null," And now we can access our ball by call our getPointByID function with defined ID."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'const char* main_xml =\n"<Main>"\n"  <Layout"\n"  id = \'mainLayout\'"\n"  x-position = \'128\'"\n"  y-position = \'64\'>"\n""\n"  </Layout>"\n"</Main>"\n""\n;\n\ngfxEngine.loadXML(main_xml);\nLayout* mainLayout = gfxEngine.findLayoutByID("mainLayout");\n')),(0,i.kt)("p",null,"If we want to move our mainLayout up by 5 pixels, all we have to do change its vertical position."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"mainLayout->setY(mainLayout->getY() - 5);\n")),(0,i.kt)("h3",{id:"points"},"Points"),(0,i.kt)("p",null,"Points are components that are represents the pixels on the screen."),(0,i.kt)("p",null,"To create a point all we need to do create a point tag and define an ID for it, in our mainLayout."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<Main>\n  <Layout\n    id = 'mainLayout'\n    x-position = '128'\n    y-position = '64'>\n    <Point id = 'point1' x-position='24' y-position='24'/>\n  </Layout>\n</Main>\n")),(0,i.kt)("p",null,"We can access our ball by call our getPointByID function with defined ID."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'const char* main_xml =\n"<Main>"\n"  <Layout"\n"  id = \'mainLayout\'"\n"  x-position = \'128\'"\n"  y-position = \'64\'>"\n"    <Point id = \'point1\' x-position=\'24\' y-position=\'24\'/>"\n"  </Layout>"\n"</Main>"\n;\n\ngfxEngine.loadXML(main_xml);\nPoint* point = gfxEngine.findPointByID("point1");\n')),(0,i.kt)("img",{src:"images/example_draw_pixel.png",height:"200"}),(0,i.kt)("p",null,"For an example, if we want to hide our new point component we need set its visibility to 0."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"point->setVisibility(0);\n")),(0,i.kt)("h3",{id:"rectangles"},"Rectangles"),(0,i.kt)("p",null,'Rectangles are components for displaying rectangles on the screen. They have arguments named "x-position", "y-position", "border-radius" etc.'),(0,i.kt)("p",null,"To display a rectangle on the screen, we need to create a rectangle tag in a layout."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<Main>\n  <Layout\n    id = 'mainLayout'\n    x-position = '128'\n    y-position = '64'>\n    <Rectangle id = 'rect' x-position='64' y-position='32' width='42' height='24' border-radius='4'/>\n  </Layout>\n</Main>\n")),(0,i.kt)("p",null,"We can access our ball by call our getRectangleByID function with defined ID."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"const char* main_xml =\n\"<Main>\"\n\"  <Layout\"\n\"    id = 'mainLayout'\"\n\"    x-position = '128'\"\n\"    y-position = '64'>\"\n\"    <Rectangle id = 'rect' x-position='64' y-position='32' width='42' height='24' border-radius='4'/>\"\n\"  </Layout>\"\n\"</Main>\"\n;\n\ngfxEngine.loadXML(main_xml);\nRectangle* rectangle = gfxEngine.getRectangleByID(\"rect\");\n")),(0,i.kt)("p",null,"Let's move our rectangle left by 10 pixels."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"rectangle->setX(rectangle->getX() + 10);\n")),(0,i.kt)("h3",{id:"circles"},"Circles"),(0,i.kt)("p",null,'We can draw circles on the screen with Circle components. A circle component has some attributes named "fill", "visibility", "radius" etc.'),(0,i.kt)("p",null,"We need to create a Circle tag in a layout first."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<Main>\n  <Layout\n    id = 'mainLayout'\n    x-position = '128'\n    y-position = '64'>\n    <Rectangle id = 'rect' x-position='64' y-position='32' width='42' height='24' border-radius='4'/>\n    <Circle id='ball' x-position='112' y-position='48' radius='2' fill='1'/>\n  </Layout>\n</Main>\n")),(0,i.kt)("p",null,"We can access our ball by call our getCircleByID function with defined ID."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"const char* game_xml =\n\"<Main>\"\n\"  <Layout\"\n\"    id = 'mainLayout'\"\n\"    x-position = '128'\"\n\"    y-position = '64'>\"\n\"    <Rectangle id = 'rect' x-position='64' y-position='32' width='42' height='24' border-radius='4'/>\"\n\"    <Circle id='ball' x-position='112' y-position='48' radius='2' fill='1'/>\"\n\"  </Layout>\"\n\"</Main>\"\n;\n\ngfxEngine.loadXML(game_xml);\nCircle* ball = getCircleByID(\"ball\");\n")),(0,i.kt)("p",null,"Let's enlarge our ball 1 pixel. We can increase radius of ball."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ball->setRadius(ball->getRadius() + 1);\n")),(0,i.kt)("h3",{id:"triangles"},"Triangles"),(0,i.kt)("p",null,"We may want to create some arrow signs or hats in our game. At this point, triangle components come to our aid."),(0,i.kt)("p",null,"To draw a triangle on the screen, all we need to do is write a Triangle tag in our XML string."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<Main>\n  <Layout\n    id = 'mainLayout'\n    x-position = '128'\n    y-position = '64'>\n    <Rectangle id = 'rect' x-position='64' y-position='32' width='42' height='24' border-radius='4'/>\n    <Circle id='ball' x-position='112' y-position='48' radius='2' fill='1'/>\n    <Triangle id='arrow' x1='12' y1='24' x2='12' y2='36' x3='24' y3='36'/>\n  </Layout>\n</Main>\n")),(0,i.kt)("p",null,"We can access our arrow by call our getTriangleByID function with defined ID."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"const char* arrow_game_xml =\n\"<Main>\"\n\"  <Layout\"\n\"    id = 'mainLayout'\"\n\"    x-position = '128'\"\n\"    y-position = '64'>\"\n\"    <Rectangle id = 'rect' x-position='64' y-position='32' width='42' height='24' border-radius='4'/>\"\n\"    <Circle id='ball' x-position='112' y-position='48' radius='2' fill='1'/>\"\n\"    <Triangle id='arrow1' x1='12' y1='24' x2='12' y2='36' x3='24' y3='36'/>\"\n\"  </Layout>\"\n\"</Main>\"\n;\n\ngfxEngine.loadXML(arrow_game_xml);\nTriangle* arrow = gfxEngine.getTriangleByID(\"arrow\");\n")),(0,i.kt)("p",null,"If we want to hide when the arrow hits an enemy all we need to set its visibility to 0."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"if (hit) {\n  arrow->setVisibility(0);\n}\n")),(0,i.kt)("h3",{id:"texts"},"Texts"),(0,i.kt)("p",null,"We learned draw so many shapes on our screen. But we don't always want to draw a shape. Also we may need to show score or name on the screen. At this point text components are very useful."),(0,i.kt)("p",null,"We can create a new text by write a Text tag in our XML in the same way."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<Main>\n  <Layout\n    id = 'mainLayout'\n    x-position = '128'\n    y-position = '64'>\n    <Text id='score' x-position='8' y-position='8' value='0'/>\n  </Layout>\n</Main>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'const char* score_xml =\n"<Main>"\n"  <Layout"\n"    id = \'mainLayout\'"\n"    x-position = \'128\'"\n"    y-position = \'64\'>"\n"    <Text id=\'scoreText\' x-position=\'8\' y-position=\'8\' value=\'0\'/>"\n"  </Layout>"\n"</Main>"\n;\n\ngfxEngine.loadXML(score_xml);\nText* scoreText = gfxEngine.getTextByID("scoreText")\n')),(0,i.kt)("p",null,"Let's increase our score by 1."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"score = 0;\nscoreText->setValue(score);\n\nscore++; // Increase score by 1\nscoreText->setValue(score);\n")))}m.isMDXComponent=!0}}]);